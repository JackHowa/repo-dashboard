{"version":3,"sources":["constants/AppConstants.js","enums/RepoDisplayNames.js","components/RepoCardStat.js","enums/RepoRoutes.js","enums/StatPropertyNames.js","enums/StatDisplayNames.js","components/ManagerCardStats.js","constants/TargetStatNames.js","components/RepoCard.js","components/RepoManager.js","constants/TargetRepoNames.js","App.js","serviceWorker.js","index.js"],"names":["AppConstants","GITHUB_REPOS_API","VOTE_COUNTER_API","REFRESH_RATE","RepoDisplayNames","REACT","ANGULAR","EMBER","VUE","RepoCardStat","_ref","title","value","react_default","a","createElement","RepoRoutes","StatPropertyNames","STARGAZERS_COUNT","FORKS_COUNT","OPEN_ISSUES","StatDisplayNames","ManagerCardStats","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderStatValues","statKeyValues","state","targetStats","map","statKey","targetStatValue","targetStatObject","find","statObject","_Object$values","values","slicedToArray","components_RepoCardStat","key","_this2","findStats","interval","setInterval","nextProps","nextState","clearInterval","_this3","_this$props","repoName","fetch","concat","then","response","json","jsonResponse","statKeyValueArray","statName","defineProperty","setState","length","Component","TargetStatNames","RepoCard","checkVoteCount","payload","amount","method","body","JSON","stringify","headers","Content-Type","success","_this$props2","voteCount","isLoaded","repoDisplayName","components_ManagerCardStats","type","onClick","postVote","RepoManager","countVotes","voteRepoArray","data","repoObject","_id","totalVotes","repoCounts","updateVotes","targetRepoNames","_this$state","targetVoteCount","countObject","components_RepoCard","TargetRepoNames","App","components_RepoManager","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.780508fc.chunk.js","sourcesContent":["export default {\n  GITHUB_REPOS_API: 'https://api.github.com/repos/',\n  VOTE_COUNTER_API: 'https://enigmatic-hollows-17650.herokuapp.com/api/votes',\n  REFRESH_RATE: 1000\n};\n","export default {\n  REACT: 'React',\n  ANGULAR: 'AngularJS',\n  EMBER: 'Ember.js',\n  VUE: 'Vue.js'\n};\n","import React from 'react';\n\nconst RepoCardStat = ({ title, value }) => (\n  <p>\n    {title}: {value}\n  </p>\n);\n\nexport default RepoCardStat;\n","export default {\n  REACT: 'facebook/react',\n  ANGULAR: 'angular/angular.js',\n  EMBER: 'emberjs/ember.js',\n  VUE: 'vuejs/vue'\n};\n","export default {\n  STARGAZERS_COUNT: 'stargazers_count',\n  FORKS_COUNT: 'forks_count',\n  OPEN_ISSUES: 'open_issues'\n};\n","export default {\n  STARGAZERS_COUNT: 'Stargazers Count',\n  FORKS_COUNT: 'Forks Count',\n  OPEN_ISSUES: 'Open Issues'\n};\n","import React, { Component } from 'react';\nimport AppConstants from '../constants/AppConstants';\nimport RepoRoutes from '../enums/RepoRoutes';\nimport RepoCardStat from './RepoCardStat';\nimport StatPropertyNames from '../enums/StatPropertyNames';\nimport StatDisplayNames from '../enums/StatDisplayNames';\n\nclass ManagerCardStats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statKeyValues: []\n    };\n  }\n\n  componentDidMount() {\n    this.findStats();\n    this.interval = setInterval(\n      () => this.findStats(),\n      AppConstants.REFRESH_RATE\n    );\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { statKeyValues } = this.state;\n\n    if (nextState.statKeyValues !== statKeyValues || nextProps !== this.props) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  findStats() {\n    const { repoName, targetStats } = this.props;\n    fetch(`${AppConstants.GITHUB_REPOS_API}${RepoRoutes[repoName]}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const statKeyValueArray = targetStats.map(statName => {\n          return {\n            [statName]: jsonResponse[StatPropertyNames[statName]]\n          };\n        });\n        this.setState({ statKeyValues: statKeyValueArray });\n      });\n  }\n\n  renderStatValues = () => {\n    const { statKeyValues } = this.state;\n    const { targetStats } = this.props;\n\n    return targetStats.map(statKey => {\n      let targetStatValue = 0;\n      const targetStatObject =\n        statKeyValues.find(statObject => {\n          return statObject[statKey];\n        }) || 0;\n\n      if (targetStatObject !== 0) {\n        [targetStatValue] = Object.values(targetStatObject);\n      }\n\n      return (\n        <RepoCardStat\n          key={statKey}\n          title={StatDisplayNames[statKey]}\n          value={targetStatValue}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { targetStats } = this.props;\n    const { statKeyValues } = this.state;\n\n    // todo: iterate over to show card repo stats\n    return (\n      <div>\n        {statKeyValues && statKeyValues.length > 1\n          ? this.renderStatValues()\n          : targetStats.map(statKey => (\n              <RepoCardStat\n                key={statKey}\n                title={StatDisplayNames[statKey]}\n                value={0}\n              />\n            ))}\n      </div>\n    );\n  }\n}\n\nexport default ManagerCardStats;\n","export default ['STARGAZERS_COUNT', 'FORKS_COUNT', 'OPEN_ISSUES'];\n","import React, { Component } from 'react';\nimport AppConstants from '../constants/AppConstants';\nimport RepoDisplayNames from '../enums/RepoDisplayNames';\nimport RepoCardStat from './RepoCardStat';\nimport ManagerCardStats from './ManagerCardStats';\nimport TargetStatNames from '../constants/TargetStatNames';\n\n// may want to refactor to stateless component\nclass RepoCard extends Component {\n  postVote() {\n    const { repoName, checkVoteCount } = this.props;\n\n    const payload = {\n      repoName,\n      amount: 1\n    };\n\n    fetch(AppConstants.VOTE_COUNTER_API, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        // todo: error checking\n        if (jsonResponse.success === true) {\n          checkVoteCount();\n        }\n      });\n  }\n\n  render() {\n    const { repoName, voteCount, isLoaded } = this.props;\n    const repoDisplayName = RepoDisplayNames[repoName];\n    return (\n      <div>\n        <h1>{repoDisplayName}</h1>\n        <ManagerCardStats repoName={repoName} targetStats={TargetStatNames} />\n        <button type=\"button\" onClick={() => this.postVote()}>\n          Vote\n        </button>\n        <RepoCardStat title=\"Vote Count\" value={isLoaded ? voteCount : ''} />\n      </div>\n    );\n  }\n}\n\nexport default RepoCard;\n","import React, { Component } from 'react';\nimport RepoCard from './RepoCard';\nimport AppConstants from '../constants/AppConstants';\n\nclass RepoManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repoCounts: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    this.countVotes();\n    this.updateVotes = setInterval(\n      () => this.countVotes(),\n      AppConstants.REFRESH_RATE\n    );\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { repoCounts } = this.state;\n\n    if (nextState.repoCounts !== repoCounts || nextProps !== this.props) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateVotes);\n  }\n\n  countVotes = () => {\n    fetch(AppConstants.VOTE_COUNTER_API)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const voteRepoArray = jsonResponse.data.map(repoObject => ({\n          [repoObject._id]: repoObject.totalVotes\n        }));\n        this.setState({\n          isLoaded: true,\n          repoCounts: voteRepoArray\n        });\n      });\n  };\n\n  checkVoteCount = () => this.countVotes();\n\n  render() {\n    const { targetRepoNames } = this.props;\n    const { repoCounts, isLoaded } = this.state;\n    return (\n      <div>\n        {targetRepoNames.map(repoName => {\n          let targetVoteCount =\n            repoCounts.find(countObject => countObject[repoName]) || 0;\n\n          if (targetVoteCount !== 0) {\n            [targetVoteCount] = Object.values(targetVoteCount);\n          }\n\n          return (\n            <RepoCard\n              key={repoName}\n              repoName={repoName}\n              voteCount={targetVoteCount}\n              isLoaded={isLoaded}\n              checkVoteCount={this.checkVoteCount}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default RepoManager;\n","export default ['REACT', 'ANGULAR', 'EMBER', 'VUE'];\n","import React from 'react';\nimport RepoManager from './components/RepoManager';\nimport TargetRepoNames from './constants/TargetRepoNames';\n\nconst App = () => <RepoManager targetRepoNames={TargetRepoNames} />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}