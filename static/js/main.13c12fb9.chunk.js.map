{"version":3,"sources":["constants/AppConstants.js","enums/RepoRoutes.js","enums/RepoDisplayNames.js","components/RepoCard.js","components/RepoManager.js","constants/TargetRepoNames.js","App.js","serviceWorker.js","index.js"],"names":["AppConstants","GITHUB_REPOS_API","VOTE_COUNTER_API","RepoRoutes","REACT","ANGULAR","EMBER","VUE","RepoDisplayNames","RepoCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","starGazerAmount","_this2","findStars","interval","setInterval","nextProps","nextState","clearInterval","_this3","repoName","fetch","concat","then","response","json","jsonResponse","stargazers_count","setState","_this$props","checkVoteCount","payload","amount","method","body","JSON","stringify","headers","Content-Type","success","_this4","_this$props2","voteCount","isLoaded","repoDisplayName","react_default","a","createElement","type","onClick","postVote","Component","RepoManager","countVotes","voteRepoArray","data","map","repoObject","defineProperty","_id","totalVotes","repoCounts","updateVotes","targetRepoNames","_this$state","targetVoteCount","find","countObject","_Object$values","values","slicedToArray","components_RepoCard","key","TargetRepoNames","App","components_RepoManager","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAAeA,EAAA,CACbC,iBAAkB,gCAClBC,iBAAkB,2DCFLC,EAAA,CACbC,MAAO,iBACPC,QAAS,qBACTC,MAAO,mBACPC,IAAK,aCJQC,EAAA,CACbJ,MAAO,QACPC,QAAS,YACTC,MAAO,WACPC,IAAK,UCoFQE,cA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,gBAAiB,GAHFR,mFAOC,IAAAS,EAAAN,KAClBA,KAAKO,YACLP,KAAKQ,SAAWC,YAAY,kBAAMH,EAAKC,aAZtB,mDAeGG,EAAWC,GAAW,IAClCN,EAAoBL,KAAKI,MAAzBC,gBAER,OACEM,EAAUN,kBAAoBA,GAC9BK,IAAcV,KAAKJ,qDAQrBgB,cAAcZ,KAAKQ,8CAGT,IAAAK,EAAAb,KACFc,EAAad,KAAKJ,MAAlBkB,SACRC,MAAK,GAAAC,OAAI9B,EAAaC,kBAAjB6B,OAAoC3B,EAAWyB,KACjDG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMf,EAAkBe,EAAaC,iBACrCR,EAAKS,SAAS,CAAEjB,yDAIX,IAAAkB,EAC4BvB,KAAKJ,MAAlCkB,EADCS,EACDT,SAAUU,EADTD,EACSC,eAEZC,EAAU,CACdX,WACAY,OAAQ,GAGVX,MAAM7B,EAAaE,iBAAkB,CACnCuC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACPC,eAAgB,sBAGjBf,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,IAEyB,IAAzBA,EAAaa,SACfT,uCAKC,IAAAU,EAAAlC,KACCK,EAAoBL,KAAKI,MAAzBC,gBADD8B,EAEmCnC,KAAKJ,MAAvCkB,EAFDqB,EAECrB,SAAUsB,EAFXD,EAEWC,UAAWC,EAFtBF,EAEsBE,SACvBC,EAAkB5C,EAAiBoB,GACzC,OACEyB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAL,gBACAC,EAAAC,EAAAC,cAAA,SAAIpC,GACJkC,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAAS,kBAAMT,EAAKU,aAA1C,QAGAL,EAAAC,EAAAC,cAAA,wBAAgBJ,EAAWD,EAAY,WA1ExBS,aCsERC,cAtEb,SAAAA,EAAYlD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACjBjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KAyBRmD,WAAa,WACXhC,MAAM7B,EAAaE,kBAChB6B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAM4B,EAAgB5B,EAAa6B,KAAKC,IAAI,SAAAC,GAAU,OAAArD,OAAAsD,EAAA,EAAAtD,CAAA,GACnDqD,EAAWE,IAAMF,EAAWG,cAE/BzD,EAAKyB,SAAS,CACZe,UAAU,EACVkB,WAAYP,OAnCDnD,EAwCnB2B,eAAiB,kBAAM3B,EAAKkD,cAtC1BlD,EAAKO,MAAQ,CACXmD,WAAY,GACZlB,UAAU,GAJKxC,mFAQC,IAAAS,EAAAN,KAClBA,KAAK+C,aACL/C,KAAKwD,YAAc/C,YAAY,kBAAMH,EAAKyC,cAbzB,mDAgBGrC,EAAWC,GAAW,IAClC4C,EAAevD,KAAKI,MAApBmD,WAER,OAAI5C,EAAU4C,aAAeA,GAAc7C,IAAcV,KAAKJ,qDAO9DgB,cAAcZ,KAAKwD,8CAmBZ,IAAA3C,EAAAb,KACCyD,EAAoBzD,KAAKJ,MAAzB6D,gBADDC,EAE0B1D,KAAKI,MAA9BmD,EAFDG,EAECH,WAAYlB,EAFbqB,EAEarB,SACpB,OACEE,EAAAC,EAAAC,cAAA,WACGgB,EAAgBP,IAAI,SAAApC,GACnB,IAAI6C,EACFJ,EAAWK,KAAK,SAAAC,GAAW,OAAIA,EAAY/C,MAAc,EAE3D,GAAwB,IAApB6C,EAAuB,KAAAG,EACLhE,OAAOiE,OAAOJ,GAAjCA,EADwB7D,OAAAkE,EAAA,EAAAlE,CAAAgE,EAAA,MAI3B,OACEvB,EAAAC,EAAAC,cAACwB,EAAD,CACEC,IAAKpD,EACLA,SAAUA,EACVsB,UAAWuB,EACXtB,SAAUA,EACVb,eAAgBX,EAAKW,2BA9DTqB,aCPXsB,EAAA,CAAC,QAAS,UAAW,QAAS,OCM9BC,EAFH,kBAAM7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAaZ,gBAAiBU,KCQ5BG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.13c12fb9.chunk.js","sourcesContent":["export default {\n  GITHUB_REPOS_API: 'https://api.github.com/repos/',\n  VOTE_COUNTER_API: 'https://enigmatic-hollows-17650.herokuapp.com/api/votes'\n  // VOTE_COUNTER_API: 'http://localhost:3001/api/votes'\n};\n","export default {\n  REACT: 'facebook/react',\n  ANGULAR: 'angular/angular.js',\n  EMBER: 'emberjs/ember.js',\n  VUE: 'vuejs/vue'\n};\n","export default {\n  REACT: 'React',\n  ANGULAR: 'AngularJS',\n  EMBER: 'Ember.js',\n  VUE: 'Vue.js'\n};\n","import React, { Component } from 'react';\nimport AppConstants from '../constants/AppConstants';\nimport RepoRoutes from '../enums/RepoRoutes';\nimport RepoDisplayNames from '../enums/RepoDisplayNames';\n\n// one second\nconst REFRESH_RATE = 1000;\n\nclass RepoCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      starGazerAmount: 0\n    };\n  }\n\n  componentDidMount() {\n    this.findStars();\n    this.interval = setInterval(() => this.findStars(), REFRESH_RATE);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { starGazerAmount } = this.state;\n\n    if (\n      nextState.starGazerAmount !== starGazerAmount ||\n      nextProps !== this.props\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  findStars() {\n    const { repoName } = this.props;\n    fetch(`${AppConstants.GITHUB_REPOS_API}${RepoRoutes[repoName]}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const starGazerAmount = jsonResponse.stargazers_count;\n        this.setState({ starGazerAmount });\n      });\n  }\n\n  postVote() {\n    const { repoName, checkVoteCount } = this.props;\n\n    const payload = {\n      repoName,\n      amount: 1\n    };\n\n    fetch(AppConstants.VOTE_COUNTER_API, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        // todo: error checking\n        if (jsonResponse.success === true) {\n          checkVoteCount();\n        }\n      });\n  }\n\n  render() {\n    const { starGazerAmount } = this.state;\n    const { repoName, voteCount, isLoaded } = this.props;\n    const repoDisplayName = RepoDisplayNames[repoName];\n    return (\n      <div>\n        <h1>{repoDisplayName} Star Amount</h1>\n        <p>{starGazerAmount}</p>\n        <button type=\"button\" onClick={() => this.postVote()}>\n          Vote\n        </button>\n        <p>Vote Count: {isLoaded ? voteCount : 0}</p>\n      </div>\n    );\n  }\n}\n\nexport default RepoCard;\n","import React, { Component } from 'react';\nimport RepoCard from './RepoCard';\nimport AppConstants from '../constants/AppConstants';\n\n// one second\nconst REFRESH_RATE = 1000;\n\nclass RepoManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repoCounts: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    this.countVotes();\n    this.updateVotes = setInterval(() => this.countVotes(), REFRESH_RATE);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { repoCounts } = this.state;\n\n    if (nextState.repoCounts !== repoCounts || nextProps !== this.props) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateVotes);\n  }\n\n  countVotes = () => {\n    fetch(AppConstants.VOTE_COUNTER_API)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const voteRepoArray = jsonResponse.data.map(repoObject => ({\n          [repoObject._id]: repoObject.totalVotes\n        }));\n        this.setState({\n          isLoaded: true,\n          repoCounts: voteRepoArray\n        });\n      });\n  };\n\n  checkVoteCount = () => this.countVotes();\n\n  render() {\n    const { targetRepoNames } = this.props;\n    const { repoCounts, isLoaded } = this.state;\n    return (\n      <div>\n        {targetRepoNames.map(repoName => {\n          let targetVoteCount =\n            repoCounts.find(countObject => countObject[repoName]) || 0;\n\n          if (targetVoteCount !== 0) {\n            [targetVoteCount] = Object.values(targetVoteCount);\n          }\n\n          return (\n            <RepoCard\n              key={repoName}\n              repoName={repoName}\n              voteCount={targetVoteCount}\n              isLoaded={isLoaded}\n              checkVoteCount={this.checkVoteCount}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default RepoManager;\n","export default ['REACT', 'ANGULAR', 'EMBER', 'VUE'];\n","import React from 'react';\nimport RepoManager from './components/RepoManager';\nimport TargetRepoNames from './constants/TargetRepoNames';\n\nconst App = () => <RepoManager targetRepoNames={TargetRepoNames} />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}