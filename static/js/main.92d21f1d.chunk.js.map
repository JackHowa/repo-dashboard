{"version":3,"sources":["constants/AppConstants.js","enums/RepoDisplayNames.js","components/RepoCardStat.js","enums/RepoRoutes.js","enums/StatPropertyNames.js","enums/StatDisplayNames.js","components/ManagerCardStats.js","constants/TargetStatNames.js","components/RepoCard.js","components/TextInput.js","components/RepoManager.js","constants/TargetRepoNames.js","App.js","serviceWorker.js","index.js"],"names":["AppConstants","GITHUB_REPOS_API","VOTE_COUNTER_API","REFRESH_RATE","RepoDisplayNames","REACT","ANGULAR","EMBER","VUE","RepoCardStat","_ref","title","value","react_default","a","createElement","RepoRoutes","StatPropertyNames","STARGAZERS_COUNT","FORKS_COUNT","OPEN_ISSUES","StatDisplayNames","ManagerCardStats","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderStatValues","statKeyValues","state","targetStats","map","statKey","targetStatValue","targetStatObject","find","statObject","_Object$values","values","slicedToArray","components_RepoCardStat","key","_this2","findStats","interval","setInterval","nextProps","nextState","clearInterval","_this3","_this$props","repoName","fetch","concat","then","response","json","jsonResponse","statKeyValueArray","statName","defineProperty","setState","length","Component","TargetStatNames","RepoCard","checkVoteCount","toggleVoteButtons","payload","emailAddress","amount","method","body","JSON","stringify","headers","Content-Type","success","alert","_this$props2","voteCount","isLoaded","showVoteButtons","repoDisplayName","components_ManagerCardStats","type","onClick","postVote","defaultProps","TextInput","submitFunction","label","onChangeFunction","inputType","onSubmit","htmlFor","name","onChange","RepoManager","countVotes","voteRepoArray","data","repoObject","_id","totalVotes","repoCounts","submitName","event","preventDefault","alreadyVoted","document","cookie","prevState","handleChange","target","updateVotes","targetRepoNames","_this$state","components_TextInput","targetVoteCount","countObject","components_RepoCard","TargetRepoNames","App","components_RepoManager","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92d21f1d.chunk.js","sourcesContent":["export default {\n  GITHUB_REPOS_API: 'https://api.github.com/repos/',\n  VOTE_COUNTER_API: 'https://enigmatic-hollows-17650.herokuapp.com/api/votes',\n  REFRESH_RATE: 1000\n};\n","export default {\n  REACT: 'React',\n  ANGULAR: 'AngularJS',\n  EMBER: 'Ember.js',\n  VUE: 'Vue.js'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RepoCardStat = ({ title, value }) => (\n  <p>\n    {title}: {value}\n  </p>\n);\n\nRepoCardStat.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n};\n\nexport default RepoCardStat;\n","export default {\n  REACT: 'facebook/react',\n  ANGULAR: 'angular/angular.js',\n  EMBER: 'emberjs/ember.js',\n  VUE: 'vuejs/vue'\n};\n","export default {\n  STARGAZERS_COUNT: 'stargazers_count',\n  FORKS_COUNT: 'forks_count',\n  OPEN_ISSUES: 'open_issues'\n};\n","export default {\n  STARGAZERS_COUNT: 'Stargazers Count',\n  FORKS_COUNT: 'Forks Count',\n  OPEN_ISSUES: 'Open Issues'\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AppConstants from '../constants/AppConstants';\nimport RepoRoutes from '../enums/RepoRoutes';\nimport RepoCardStat from './RepoCardStat';\nimport StatPropertyNames from '../enums/StatPropertyNames';\nimport StatDisplayNames from '../enums/StatDisplayNames';\n\nclass ManagerCardStats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statKeyValues: []\n    };\n  }\n\n  componentDidMount() {\n    this.findStats();\n    this.interval = setInterval(\n      () => this.findStats(),\n      AppConstants.REFRESH_RATE\n    );\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { statKeyValues } = this.state;\n\n    if (nextState.statKeyValues !== statKeyValues || nextProps !== this.props) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  findStats() {\n    const { repoName, targetStats } = this.props;\n    fetch(`${AppConstants.GITHUB_REPOS_API}${RepoRoutes[repoName]}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const statKeyValueArray = targetStats.map(statName => {\n          return {\n            [statName]: jsonResponse[StatPropertyNames[statName]]\n          };\n        });\n        this.setState({ statKeyValues: statKeyValueArray });\n      });\n  }\n\n  renderStatValues = () => {\n    const { statKeyValues } = this.state;\n    const { targetStats } = this.props;\n\n    return targetStats.map(statKey => {\n      let targetStatValue = 0;\n      const targetStatObject =\n        statKeyValues.find(statObject => {\n          return statObject[statKey];\n        }) || 0;\n\n      if (targetStatObject !== 0) {\n        [targetStatValue] = Object.values(targetStatObject);\n      }\n\n      return (\n        <RepoCardStat\n          key={statKey}\n          title={StatDisplayNames[statKey]}\n          value={targetStatValue}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { targetStats } = this.props;\n    const { statKeyValues } = this.state;\n\n    return (\n      <div>\n        {statKeyValues && statKeyValues.length > 1\n          ? this.renderStatValues()\n          : targetStats.map(statKey => (\n              <RepoCardStat\n                key={statKey}\n                title={StatDisplayNames[statKey]}\n                value={0}\n              />\n            ))}\n      </div>\n    );\n  }\n}\n\nManagerCardStats.propTypes = {\n  repoName: PropTypes.string.isRequired,\n  targetStats: PropTypes.instanceOf(Array).isRequired\n};\n\nexport default ManagerCardStats;\n","export default ['STARGAZERS_COUNT', 'FORKS_COUNT', 'OPEN_ISSUES'];\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AppConstants from '../constants/AppConstants';\nimport RepoDisplayNames from '../enums/RepoDisplayNames';\nimport RepoCardStat from './RepoCardStat';\nimport ManagerCardStats from './ManagerCardStats';\nimport TargetStatNames from '../constants/TargetStatNames';\n\nclass RepoCard extends Component {\n  postVote() {\n    const {\n      repoName,\n      checkVoteCount,\n      toggleVoteButtons,\n      emailAddress\n    } = this.props;\n\n    const payload = {\n      repoName,\n      emailAddress,\n      amount: 1\n    };\n\n    fetch(AppConstants.VOTE_COUNTER_API, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.success === true) {\n          checkVoteCount();\n          toggleVoteButtons();\n        } else {\n          alert('There was an issue with voting');\n        }\n      });\n  }\n\n  render() {\n    const { repoName, voteCount, isLoaded, showVoteButtons } = this.props;\n    const repoDisplayName = RepoDisplayNames[repoName];\n    return (\n      <div>\n        <h2>{repoDisplayName}</h2>\n        <ManagerCardStats repoName={repoName} targetStats={TargetStatNames} />\n        {showVoteButtons ? (\n          <button type=\"button\" onClick={() => this.postVote()}>\n            Vote\n          </button>\n        ) : (\n          <div />\n        )}\n        <RepoCardStat title=\"Vote Count\" value={isLoaded ? voteCount : ''} />\n      </div>\n    );\n  }\n}\n\nRepoCard.propTypes = {\n  repoName: PropTypes.string.isRequired,\n  voteCount: PropTypes.number.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  showVoteButtons: PropTypes.bool.isRequired,\n  emailAddress: PropTypes.string,\n  toggleVoteButtons: PropTypes.func.isRequired,\n  checkVoteCount: PropTypes.func.isRequired\n};\n\nRepoCard.defaultProps = {\n  emailAddress: ''\n};\n\nexport default RepoCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextInput = ({\n  submitFunction,\n  label,\n  value,\n  onChangeFunction,\n  inputType\n}) => (\n  <form onSubmit={submitFunction}>\n    <label htmlFor={label}>\n      {label}\n      <input\n        type={inputType}\n        name={label}\n        value={value}\n        onChange={onChangeFunction}\n      />\n    </label>\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n);\n\nTextInput.propTypes = {\n  submitFunction: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChangeFunction: PropTypes.func.isRequired,\n  inputType: PropTypes.string\n};\n\nTextInput.defaultProps = {\n  inputType: 'text'\n};\n\nexport default TextInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport RepoCard from './RepoCard';\nimport AppConstants from '../constants/AppConstants';\nimport TextInput from './TextInput';\n\nclass RepoManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repoCounts: [],\n      isLoaded: false,\n      emailAddress: '',\n      showVoteButtons: false\n    };\n  }\n\n  componentDidMount() {\n    this.countVotes();\n    this.updateVotes = setInterval(\n      () => this.countVotes(),\n      AppConstants.REFRESH_RATE\n    );\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState !== this.state || nextProps !== this.props) {\n      return true;\n    }\n    return false;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateVotes);\n  }\n\n  countVotes = () => {\n    fetch(AppConstants.VOTE_COUNTER_API)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        const voteRepoArray = jsonResponse.data.map(repoObject => ({\n          [repoObject._id]: repoObject.totalVotes\n        }));\n        this.setState({\n          isLoaded: true,\n          repoCounts: voteRepoArray\n        });\n      });\n  };\n\n  checkVoteCount = () => this.countVotes();\n\n  submitName = event => {\n    event.preventDefault();\n\n    const { emailAddress } = this.state;\n\n    fetch(`${AppConstants.VOTE_COUNTER_API}/${emailAddress}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.alreadyVoted === false && document.cookie === '') {\n          document.cookie = emailAddress;\n          this.toggleVoteButtons();\n        } else {\n          const { repoName } = jsonResponse;\n          if (repoName) {\n            alert(`${emailAddress} already voted for ${repoName}`);\n          } else {\n            alert(`You or someone else on this machine already voted`);\n          }\n        }\n      });\n  };\n\n  toggleVoteButtons = () =>\n    this.setState(prevState => ({\n      showVoteButtons: !prevState.showVoteButtons\n    }));\n\n  handleChange = event => this.setState({ emailAddress: event.target.value });\n\n  render() {\n    const { targetRepoNames } = this.props;\n    const { repoCounts, isLoaded, showVoteButtons, emailAddress } = this.state;\n    return (\n      <div>\n        <h1>Client-Side JavaScript Framework Dashboard</h1>\n        <p>Enter an email to vote!</p>\n        <p>You can only vote once.</p>\n        <TextInput\n          submitFunction={this.submitName}\n          label=\"Email\"\n          value={emailAddress}\n          onChangeFunction={this.handleChange}\n          inputType=\"email\"\n        />\n        {targetRepoNames.map(repoName => {\n          let targetVoteCount =\n            repoCounts.find(countObject => countObject[repoName]) || 0;\n\n          if (targetVoteCount !== 0) {\n            [targetVoteCount] = Object.values(targetVoteCount);\n          }\n\n          return (\n            <RepoCard\n              key={repoName}\n              repoName={repoName}\n              voteCount={targetVoteCount}\n              isLoaded={isLoaded}\n              checkVoteCount={this.checkVoteCount}\n              showVoteButtons={showVoteButtons}\n              toggleVoteButtons={this.toggleVoteButtons}\n              emailAddress={emailAddress}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nRepoManager.propTypes = {\n  targetRepoNames: PropTypes.instanceOf(Array).isRequired\n};\n\nexport default RepoManager;\n","export default ['REACT', 'ANGULAR', 'EMBER', 'VUE'];\n","import React from 'react';\nimport RepoManager from './components/RepoManager';\nimport TargetRepoNames from './constants/TargetRepoNames';\n\nconst App = () => <RepoManager targetRepoNames={TargetRepoNames} />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}